/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Color;
import java.awt.Font;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import metier.Concours;
import metier.Film;
import metier.Horaire;
import metier.Projection;
import metier.Salle;
import metier.Salle_Concours;
import vue.Code;

/**
 *
 * @author eloiblt
 */
public class Fenetre extends javax.swing.JFrame {

    /**
     * Creates new form Fenetre
     */
    public Fenetre(Code c) {
        code = c;
        initComponents();
        configGui();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10", "Title 11", "Title 12", "Title 13", "Title 14"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jLabel1.setText("Afficher le planning par ");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Afficher le jour ");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Génération de planning ");

        jButton1.setText("Assigner le film selectionné");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Supprimer la projection selectionnée");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Enregistrer ce planning !");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1085, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(140, 140, 140)
                                        .addComponent(jLabel3))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(116, 116, 116)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton3))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 729, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton1))
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // droite, fonction de gauche
        try
        {
            //resetList();
            //createJList();
            remplirJTable();
            resetList();
            remplirJList();
        }
        catch(Exception e)
        {
            System.out.println("EXCEPTION ON JCOMBOBOX2");
        }
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // gauche, jour et salle
        String s;
        try
        {
            s = jComboBox1.getSelectedItem().toString();
            
            if (s == "Salle")
            {
                jLabel2.setText("Afficher la salle");
                List<Salle> liste = code.getListeSalle();
                jComboBox2.removeAllItems();                // remplit second combobox
                for (Salle a : liste)
                {
                    jComboBox2.addItem(a.getNom());
                }   
                
                resetTable();
                //resetList();
                //createJList();
                createTableSalle();
            }
            else if (s == "Jour")
            {
                jLabel2.setText("Afficher le jour");
                jComboBox2.removeAllItems();                // remplit second combobox
                for (int i=1 ; i<=11 ; i++)
                    jComboBox2.addItem(String.valueOf(i));
                
                resetTable();
                //resetList();
                //createJList();
                createTableJour();
            }
            remplirJTable();
        }
        catch (Exception e)
        {
            System.out.println("ERRRRRRRRRRRRRRRRRRRRRRRRRROOOOOOOOOOOR");
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // assigner le film selectionné
        try 
        {
            String titre = jList1.getSelectedValue();
            int index = jList1.getSelectedIndex();
            int x = jTable1.getSelectedRow();
            int y = jTable1.getSelectedColumn();
            
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            
            if (y != 0 && model.getValueAt(x, y) == null)           // pas ajout sur colomne horaire et pas sur une cellule deja occupee 
            {
                model.setValueAt(titre, x, y);              // remplit la jtable

                DefaultListModel model2 = (DefaultListModel) jList1.getModel();                 // vide la jlist
                model2.remove(index);
            }
            else 
            {
                throw new ArrayIndexOutOfBoundsException("Incorrect index");
            }
        }
        catch (ArrayIndexOutOfBoundsException e)
        {
            JOptionPane jop1 = new JOptionPane();
            jop1.showMessageDialog(null, "Choisissez un film et un créneau horaire libre pour effectuer cette opération !", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // supprimer la projection selectionnee 
        int x = jTable1.getSelectedRow();
        int y = jTable1.getSelectedColumn();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel(); 
        
        if (model.getValueAt(x, y) != null && y != 0)           // pas suppression case vide ou de la colonne horaire 
        {
            String un = jComboBox1.getSelectedItem().toString();
            String deux = jComboBox2.getSelectedItem().toString();
            String jour;
            int intjour =-1;
            String salle;
            int idSalle = -1;
            String horaire;
            int idHoraire =-1;
            
            if (un == "Jour")
            {
                jour = deux;
                intjour = Integer.valueOf(jour);
                salle = jTable1.getColumnName(y);           // nom salle
                for (Salle s : code.getListeSalle())        // id salle
                {
                    if (s.getNom() == salle)
                        idSalle = s.getId();
                }
                
                horaire = String.valueOf(model.getValueAt(x, 0));
                for (Horaire s : code.getListeHoraire())        // id salle
                {
                    if (s.getHoraire() == horaire)
                        idHoraire = s.getId();
                }
                
                //System.out.println(intjour + " " + idSalle + " " + idHoraire);
            }
            else if (un == "Salle")
            {
                salle = deux;                   // nom salle
                for (Salle s : code.getListeSalle())        // id salle
                {
                    if (s.getNom() == salle)
                        idSalle = s.getId();
                }
                
                jour = jTable1.getColumnName(y);           // nom salle
                intjour = Integer.valueOf(jour);
                
                horaire = String.valueOf(model.getValueAt(x, 0));
                for (Horaire s : code.getListeHoraire())        // id salle
                {
                    if (s.getHoraire() == horaire)
                        idHoraire = s.getId();
                }
                
                //System.out.println(intjour + " " + idSalle + " " + idHoraire);
            }
            
            if (code.supprimerProjection(intjour, idSalle, idHoraire))
            {
                filmsAPlacer.add(String.valueOf(model.getValueAt(x, y)));
                model.setValueAt(null, x, y);
                resetList();
                remplirJList();
            }
            else
            {
                JOptionPane jop1 = new JOptionPane();
                jop1.showMessageDialog(null, "Vous ne vous pouvez pas supprimer cette projection car des séances du lendemain lui sont associées !", "Information", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        else 
        {
            JOptionPane jop1 = new JOptionPane();
            jop1.showMessageDialog(null, "Choisissez une projection pour la supprimer !", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // enregister ce planning
        instantaneJTable();
    }//GEN-LAST:event_jButton3ActionPerformed

    /*public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Fenetre(null).setVisible(true);
            }
        });
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    private Code code;
    private int nbElemList = 0;
    private List<String> filmsAPlacer;
    
    private void configGui()                // appellée début, configure table en jour 
    {
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);          // configuration jTable
        jTable1.getTableHeader().setResizingAllowed(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.setRowSelectionAllowed(false);
        jTable1.setCellSelectionEnabled(true);
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( SwingConstants.CENTER );
        jTable1.setDefaultRenderer(String.class, centerRenderer);
        jTable1.setFont(new Font("Verdana", Font.BOLD, 10));
        jTable1.setDefaultEditor(Object.class, null);                   // non editable 
        jTable1.setBackground(Color.LIGHT_GRAY);
        
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.getValueAt(0,0);
        
        jComboBox1.removeAllItems();                // vide combobox gauche
        jComboBox1.addItem("Jour");                 // remplit combobox gauche
        jComboBox1.addItem("Salle");
        
        jComboBox2.removeAllItems();                // vide second combobox
        filmsAPlacer = new ArrayList<String>();
        
        jList1.setModel(new DefaultListModel());
        
        resetTable();
        createTableJour();
        
        remplirJTable();
    }
    
    public void createTableJour()
    {
        jComboBox2.removeAllItems();
        for (int i=1 ; i<=11 ; i++)
            jComboBox2.addItem(String.valueOf(i));
        
        DefaultTableModel dm = (DefaultTableModel) jTable1.getModel();  
        
        List<Horaire> listeH = code.getListeHoraire();      // colomne horaire
        dm.addColumn("Horaire", listeH.toArray());
        
        List<Salle> listeS = code.getListeSalle();          // autres colonnes (salles)
        for (Salle s : listeS)
        {
            dm.addColumn(s.getNom());
        }
        
        TableColumnModel columnModel = jTable1.getColumnModel();        // taille
        columnModel.getColumn(0).setPreferredWidth(100);
        for (int i=1 ; i < jTable1.getColumnCount() ; i++)
            columnModel.getColumn(i).setPreferredWidth(200);
        
        jTable1.setRowHeight(130);
    }
    
    public void createTableSalle()      
    {
        DefaultTableModel dm = (DefaultTableModel) jTable1.getModel();  
        
        List<Horaire> listeH = code.getListeHoraire();              // colomne horaire
        dm.addColumn("Horaire", listeH.toArray());
        
        for (int i=1 ; i<=11 ; i++)                 // autres colomnes (jour)
        {
            dm.addColumn(i);
        }
        
        TableColumnModel columnModel = jTable1.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(100);
        for (int i=1 ; i < jTable1.getColumnCount() ; i++)
            columnModel.getColumn(i).setPreferredWidth(200);
        
        jTable1.setRowHeight(134);
    }
    
    public void resetTable()             
    {
        DefaultTableModel dm = (DefaultTableModel) jTable1.getModel();          //suppression des lignes 
        int rowCount = dm.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            dm.removeRow(i);
        }
        dm.setColumnCount(0);                               // suppression des colomnes 
    }
    
    public void resetList()
    {
        DefaultListModel model = (DefaultListModel) jList1.getModel();
        model.clear();
    }
    
    public void createJList()               // affichage de tous les films placables, deprecated 
    {
        String a = jComboBox1.getSelectedItem().toString();
        DefaultListModel dlm = (DefaultListModel) jList1.getModel(); 
        List<Film> listeFilms = code.getListeFilm();
        
        if (a == "Salle")           // affichage films pour la salle selectionnee dans jcombobox 2
        {
            String salle = jComboBox2.getSelectedItem().toString();         // salle
            List<Salle_Concours> listeSC = code.getSalleConcours();         // salle concours 
            
            int i=0;
            for (Salle_Concours sc : listeSC)
            {
                if(sc.getSalle().getNom() == salle)
                {
                    Concours conc = sc.getConcours();                       // on trouve un concours pour la salle 
                    for(Film f : listeFilms)
                    {
                        if (f.getConcours() == conc)
                        {
                            dlm.add(i, f.getTitre());                           // on ajoute le film qui peut etre passé dans ce concours 
                            i++;
                        }
                    }
                }    
            }
        }
        else if (a == "Jour")          // affichage de tous les films
        {
            int i = 0;
            for (Film f : listeFilms)
            {
                dlm.add(i, f.getTitre());
                i++;
            }
        }
    }
    
    public List<List<Film>> instantaneJTable()
    {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int columns = jTable1.getColumnCount();
        int lignes = jTable1.getRowCount();
        String[][] tab = new String[lignes][columns-1];
        
        for (int i=0 ; i<lignes ; i++)              // stocke infos dans tab 2d de strings (titre ou null)
        {
            for (int j=1 ; j<columns ; j++)         // 1 car compte pas table horaire 
            {
                tab[i][j-1] = (String) model.getValueAt(i, j);
            }
        }
        
        List<List<Film>> liste = new ArrayList<List<Film>>();           // tableau final 
        
        List<Film> lf = code.getListeFilm();                            // tous les films 
        
        for(int i=0 ; i< tab.length ; i++)
        {
            List<Film> temp = new ArrayList<Film>();
            
            for(int j=0 ; j<tab[0].length ; j++)
            {
                if (tab[i][j] == null)
                {
                    temp.add(null);
                    continue;
                }
                
                int t=0;
                while(lf.get(t).getTitre() != tab[i][j])
                    t++;
                
                temp.add(lf.get(t));
            }
            
            liste.add(temp);
        }
        
        for (List<Film> l : liste)                  // affichage table 
        {
            for (Film f : l)
            {
                if (f != null)
                    System.out.print(f.getTitre() + " ");
                else 
                    System.out.print("null" + " ");
            }
            System.out.println();
        }
        
        System.out.println();
        
        return liste;
    }
    
    public void remplirJTable()
    {
        List<Projection> projections = code.getProjections();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        
        String un = jComboBox1.getSelectedItem().toString();
        String deux = jComboBox2.getSelectedItem().toString();
        
        for (int i=0 ; i<model.getRowCount() ; i++)             // efface table pour la remplir ci besoin après 
        {
            for (int j=1 ; j<model.getColumnCount() ; j++)
            {
                model.setValueAt(null,i, j); 
            }
        }
        
        if (un == "Jour")
        {
            int jour = Integer.valueOf(deux);               // prend le jour affiche
            int ligne =0, colomne=0;
                
            for (Projection p : projections)
            {
                if (p.getJour() == jour)                // on a une projection à afficher car elle a le bon jour 
                {
                    //System.out.println(p);
                    
                    String horaire = p.getHoraire().getHoraire();                   // recherche ligne depuis horaire de la projection
                    for (int i=0 ; i<model.getRowCount() ; i++)                     
                    {
                        String czero = String.valueOf(model.getValueAt(i, 0));          

                        if (czero.equals(horaire))                                    // si on trouve le bon horaire on prend le num de ligne 
                        {
                            ligne = i;
                            //System.out.println("ligne " + ligne);
                            break;
                        }
                    }

                    String salle = p.getSalle().getNom();                      // on trouve le numero de colomne a partir du nom de la salle 
                    for (int i=0 ; i<model.getColumnCount() ; i++)
                    {
                        if (jTable1.getColumnName(i).equals(salle))             // si le nom de colomne est le bon nom de salle, on prend le num colomne 
                        {
                            colomne = i;
                            //System.out.println("colomne " + colomne);
                            break;
                        }
                    }

                    //System.out.println("cette projection est a positionner ligne " + ligne + ", colomne " + colomne + " du jour " + jour);

                    model.setValueAt(p.getFilm().getTitre(),ligne, colomne);                // et on fout le film à la bonne place 
                }
            }
        }
        else if (un == "Salle")
        {
            String salle = deux;                // salle affichee
            int ligne =0, colomne=0;    
            
            for (Projection p : projections)
            {
                if (p.getSalle().getNom() == salle)                // on a une projection à afficher car elle a la bonne salle 
                {
                    //System.out.println(p);

                    String horaire = p.getHoraire().getHoraire();                   // recherche ligne depuis salle de la projection
                    for (int i=0 ; i<model.getRowCount() ; i++)                     // balaye lignes
                    {
                        String czero = String.valueOf(model.getValueAt(i, 0));          

                        if (czero.equals(horaire))                                    // si on trouve le bon horaire on prend le num de ligne 
                        {
                            ligne = i;
                            //System.out.println("ligne " + ligne);
                            break;
                        }
                    }

                    int jour = p.getJour();                                         // on trouve le numero de colomne a partir du numero de jour 
                    for (int i=0 ; i<model.getColumnCount() ; i++)
                    {
                        if (jTable1.getColumnName(i).equals((String.valueOf(jour))))            // si le nom de colomne est au bon num jour, on prend le num colomne 
                        {
                            colomne = i;
                            //System.out.println("colomne " + colomne);
                            break;
                        }
                    }

                    //System.out.println("cette projection est a positionner ligne " + ligne + ", colomne " + colomne + " du jour " + jour);

                    model.setValueAt(p.getFilm().getTitre(),ligne, colomne);                // et on fout le film à la bonne place 
                }
            }
        }
    }
    
    public void remplirJList()
    {
        /*List<Projection> projections = code.getProjections();           // projections non placees 
        String a = jComboBox1.getSelectedItem().toString();
        DefaultListModel dlm = (DefaultListModel) jList1.getModel(); 
        
        if (a == "Salle")           // affichage films pour la salle selectionnee dans jcombobox 2
        {
            String salle = jComboBox2.getSelectedItem().toString();         // salle
            
            for (Projection p : projections)
            {
                if(p.getSalle().getNom() == salle)                      // la projection se place ici
                {
                    dlm.add(nbElemList, p.getFilm().getTitre());                           
                    nbElemList++;
                }    
            }
        }
        else if (a == "Jour")          // affichage de tous les films
        {
            int i = 0;
            for (Projection p : projections)
            {
                dlm.add(nbElemList, p.getFilm().getTitre());
                nbElemList++;
            }
        }*/
        
        DefaultListModel dlm = (DefaultListModel) jList1.getModel(); 
        
        int i=0;
        for (String s : filmsAPlacer)
        {
            dlm.add(nbElemList, s);
            i++;
        }
    }
}
